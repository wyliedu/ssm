<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
  	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/tx
  						http://www.springframework.org/schema/tx/spring-tx.xsd
  						http://www.springframework.org/schema/aop
  						http://www.springframework.org/schema/aop/spring-aop.xsd
  						http://www.springframework.org/schema/cache
  						http://www.springframework.org/schema/cache/spring-cache.xsd
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:database.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${connection.driver_class}" />
		<property name="url" value="${connection.url}" />
		<property name="username" value="${connection.username}" />
		<property name="password" value="${connection.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}"></property>
		<property name="validationQuery" value="SELECT 1" />
    	<property name="testOnBorrow" value="true"/>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/hszs/stb/mapper/*.xml"></property>
		<property name="configurationProperties">
            <props>
                <prop key="cacheEnabled">false</prop> 
                <prop key="lazyLoadingEnabled">false</prop> 
                <prop key="aggressiveLazyLoading">true</prop>
            </props>
        </property>
		<property name="plugins">
    	<array>
     		 <bean class="com.github.pagehelper.PageHelper">
        		<property name="properties">
          		<value>
            	dialect=mysql
            	offsetAsPageNum=true  <!--该参数默认为false设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用和startPage中的pageNum效果一样 -->
            	rowBoundsWithCount=true         <!-- 该参数默认为false设置为true时，使用RowBounds分页会进行count查询 -->
            	pageSizeZero=true		<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是Page类型） -->
            	returnPageInfo=check <!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
          </value>
        </property>
      </bean>
    </array>
  </property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hszs.stb.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />  
        	<tx:method name="add*" propagation="REQUIRED" />  
        	<tx:method name="create*" propagation="REQUIRED" />  
        	<tx:method name="insert*" propagation="REQUIRED" />  
        	<tx:method name="update*" propagation="REQUIRED" />  
        	<tx:method name="merge*" propagation="REQUIRED" />  
        	<tx:method name="del*" propagation="REQUIRED" />  
        	<tx:method name="remove*" propagation="REQUIRED" />  
          
        	<tx:method name="put*" read-only="true"/>  
        	<tx:method name="query*" read-only="true"/>  
        	<tx:method name="use*" read-only="true"/>  
        	<tx:method name="get*" read-only="true" />  
        	<tx:method name="count*" read-only="true" />  
        	<tx:method name="find*" read-only="true" />  
        	<tx:method name="list*" read-only="true" />  
          
        	<tx:method name="*" propagation="REQUIRED"/> 
			<tx:method name="*Transaction" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 事务切面和读/写库选择切面 -->
	<aop:config>
		<!-- 对基类业务逻辑层实施事务 -->
		<aop:pointcut id="serviceMethod" expression="execution(* com.hszs.stb.service..*(..))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
		<!-- 通过AOP切面实现读/写库选择 -->  
    	<!-- <aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">  
       		<aop:around pointcut-ref="serviceMethod" method="determineReadOrWriteDB"/>  
    	</aop:aspect>  -->
	</aop:config>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager">
            <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
                <property name="configLocation" value="classpath:com/hszs/stb/config/ehcache-config.xml"></property>
            </bean>
        </property>
    </bean> 
</beans>